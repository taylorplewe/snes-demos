name: Transition issue to In Review

on:
  pull_request:
    types:
      - assigned

jobs:
  move_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Get Assignee ID (GraphQL)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ASSIGNEE_ID=$(gh api graphql -H "X-GitHub-Next-Global-ID: 1" -f query='
          query {
            repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
              pullRequest(number: ${{ github.event.pull_request.number }}) {
                assignees(first: 1) {
                  nodes {
                    id  # This will now return the new global ID
                  }
                }
              }
            }
          }' | jq -r '.data.repository.pullRequest.assignees.nodes[0].id')
          echo "ASSIGNEE_ID=$ASSIGNEE_ID" >> $GITHUB_ENV

      - name: Get project info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api graphql -f query='
            query {
              user(login: "taylorplewe") {
                projectsV2(first: 10) {
                  nodes {
                    id
                    number
                    title
                  }
                }
              }
            }
          ' >> project_data.json
          cat project_data.json
          # echo 'project id'
          # echo $(jq '.data.user.projectV2.id' project_data.json)
          # echo 'field name'
          # echo $(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .name' project_data.json)
          # echo 'field id'
          # echo $(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json)
          # echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
          # echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
    
      - name: Get issue info from pull request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api graphql -f query='
            query {
              node(id: "${{ github.event.pull_request.node_id }}") {
                ... on PullRequest {
                  closingIssuesReferences(first: 1) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            }
          ' > issue_info.json
          cat issue_info.json
          echo 'ISSUE_ID='$(jq '.data.node.closingIssuesReferences.nodes[0].id' issue_info.json) >> $GITHUB_ENV

      - name: Assign issue to PR assignee
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api graphql -f query='
            mutation($issueId: ID!, $assigneeId: ID!) {
              updateIssue(input: {id: $issueId, assigneeIds: [ $assigneeId ]}) {
                clientMutationId
              }
            }
          ' -f issueId=$ISSUE_ID -f assigneeId=$ASSIGNEE_ID
